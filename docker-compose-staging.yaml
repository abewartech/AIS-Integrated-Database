version: "3.7"
#===============================
# What's this?
#===============================
# This is a docker compose file inteneded for use in a dev/local environment. 
# Developers should run this in order to test things like the docker building,
# API testing and SQL queries. Not intended for production/staging deployment.

#===============================
# Compose extension fields
#===============================
x-logging:
  &default-logging
      driver: json-file
      options:
        max-size: 10m

#===============================
services: 
#===============================
  database:
  # High availablity version of PG with
  # Timescaledb and PostGIS extensions installed.
  # https://github.com/timescale/timescaledb-docker-ha
    build: 
      context: .
      dockerfile: Dockerfile-staging
    container_name: ${DB_HOST}
    user: ${UID}:${GID}
    shm_size: 4g
    command: postgres -c shared_preload_libraries=timescaledb
    # restart: unless-stopped
    networks:
      - back_end
    ports:
      - ${DB_EXT_PORT}:5432
    logging: *default-logging
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_UID=${UID}
      - POSTGRES_GID=${GID}
    # volumes:
    ## Volume commented out to test building of DB. 
    ## Uncomment when requiring persistance
      # - ./volumes/db/:/var/lib/postgresql/data
  
  featserv:
  # This is a template for a service that is not made available on the  
  # Traefik network.
    image: pramsey/pg_featureserv:${PGFEATSERV_TAG}
    container_name: featserv
    # restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
    networks:
      - back_end
    ports:
      - ${API_PORT}:9000
    logging: *default-logging
    environment:
      - DATABASE_URL=postgresql://api:Secure_API_Password@${DB_HOST}/${DB_NAME}

#===============================
# volumes:
#===============================
#   rabbit_data:
#   rabbit_etc:

#===============================
networks:
#===============================
  back_end:


